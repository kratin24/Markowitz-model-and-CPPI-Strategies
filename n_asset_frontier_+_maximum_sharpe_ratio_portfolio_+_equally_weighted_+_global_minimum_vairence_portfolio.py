# -*- coding: utf-8 -*-
"""N Asset Frontier + Maximum Sharpe ratio Portfolio + Equally weighted + Global minimum vairence Portfolio

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sNl92tzc5Dlsrrh-nJC8mJLfYSw0lWf2
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

returns=pd.read_csv("ind30_m_vw_rets.csv",header=0,index_col=0,parse_dates=True)
returns.index=pd.to_datetime(returns.index,format='%Y%m')
returns.index=returns.index.to_period('M')
returns=returns/100

returns.head()

returns.columns=returns.columns.str.strip() # to remove spaces in front of column names

"""#Function to calculate annual returns"""

def annual_ret(ret):
  number_of_rows=ret.shape[0]
  pro=(1+ret).prod()
  ann_ret=(pro**(12/number_of_rows))-1
  return ann_ret

er=annual_ret(returns['1996':'2000'])

cov=returns['1996':'2000'].cov()

"""#Functions to calculate portfolio returns and portfolio volatilities"""

def portfolio_ret(weights, returns):
  return weights.T @ returns

def portfolio_vol(weights,covmat):
  return (weights.T@covmat@weights)**0.5

# weights = minimize volatility for a certaain target retu
#quadratic optimizer

"""#Function to give weights to give minimum volatility for a given return using optimizer"""

from scipy.optimize import minimize
def minimize_vol(target_return,er,cov):
  n=er.shape[0]
  init_guess=np.repeat(1/n,n)
  bounds=((0.0,1.0),)*n
  return_is_target={
      'type':'eq',
      'args':(er,),
      'fun': lambda weights,er:target_return-portfolio_ret(weights,er) # constraint  is met when this thing is equal to zero
  }
  weights_sum_to_1={
      'type':'eq',
      'fun': lambda weights: np.sum(weights)-1
  }

  # return is target and weights_sum_to_1 are targets

  good_weights=minimize(portfolio_vol,init_guess,
                   args=(cov,),method="SLSQP",
                   options={'disp':False},
                   constraints=(return_is_target,weights_sum_to_1),
                   bounds=bounds)



  return good_weights.x

"""#Plotting efficient frontier for 4 Asset Class"""

l=['Smoke','Fin','Games','Coal'] #1996, 2000

er[l]

cov.loc[l,l]

target_return=np.linspace(er[l].min(),er[l].max(),100)
target_return

final_return=pd.Series(target_return)

final_report=pd.DataFrame({'Returns':target_return})
final_report

target_return

weightss=[minimize_vol(x,er[l],cov.loc[l,l]) for x in target_return]
volatilities=[portfolio_vol(i,cov.loc[l,l]) for i in weightss]
final_report['volatilities']=volatilities

final_report

plt.plot(final_report['volatilities'],final_report['Returns'])

final_report['volatilities'].min()

"""#Weights for minimum volatility"""

final_report.sort_values(by='volatilities') # point for minimum volatitlity

weights_for_min_vol=minimize_vol(0.134707,er[l],cov.loc[l,l])
weights_for_min_vol

risk_free_rate=0.1

final_report

final_report['Sharpe_ratio']=(final_report['Returns']-risk_free_rate)/final_report['volatilities']

final_report

plt.plot(final_report['volatilities'],final_report['Returns'])

temp_final_report=final_report.sort_values(by='Sharpe_ratio',ascending=False)

temp_final_report



plt.plot(final_report['volatilities'],final_report['Returns'])
x=[0,temp_final_report['volatilities'][66]]
y=[risk_free_rate,temp_final_report['Returns'][66]]
plt.plot(x,y,'.',c='r')
plt.plot(x,y,c='r')

"""#Weights for maximum sharpe ratio"""

minimize_vol(temp_final_report['Returns'][66],er[l],cov.loc[l,l])

l

er['Food']

"""#Equally weighted portfolio"""

er[l]

er[l].size

sz=er[l].size
e_w=np.repeat(1/sz,sz)
e_w_vol=portfolio_vol(e_w,cov.loc[l,l])
e_w_ret=portfolio_ret(e_w,er[l])

plt.plot(final_report['volatilities'],final_report['Returns'])
x=[0,temp_final_report['volatilities'][66]]
y=[risk_free_rate,temp_final_report['Returns'][66]]
plt.plot(x,y,'.',c='r')
plt.plot(x,y,c='r')

plt.scatter(e_w_vol,e_w_ret,c='y')

e_w_ret

e_w_vol

"""#Global Minimum Varience Portfolio"""

gmv_final_report=final_report.sort_values(by='volatilities')

gmv_final_report

plt.plot(final_report['volatilities'],final_report['Returns'])
x=[0,temp_final_report['volatilities'][66]]
y=[risk_free_rate,temp_final_report['Returns'][66]]
plt.plot(x,y,'.',c='r')
plt.plot(x,y,c='r')

plt.scatter(e_w_vol,e_w_ret,c='y')
plt.scatter(gmv_final_report['volatilities'][19],gmv_final_report['Returns'][19],c='g')

weights_for_gmv=minimize_vol(gmv_final_report['Returns'][19],er[l],cov.loc[l,l])

weights_for_gmv